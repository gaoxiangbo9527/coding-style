根据情况，可以针对团队或者项目制定编程规范，一般建议针对团队级别制定编程规范。

必须在所有团队成员之间进行一次沟通和修订，最终要达成一致，还要形成文档形式的初稿，以供后续查看和管理。

初稿形成后，只能由负责人自己或者负责人指定的人员进行管理。其他人员只能查看，但可以将修改意见反馈给相关的负责人。

可以利用 EditorConfig 在不同的开发人员或编辑器之间强制落实和格式化相关的那部分规则。建议为每个项目制定所需的 .editorconfig 文件，并提交到
代码仓库中。虽然能够为整个团队建立一个基准的 .editorconfig 文件，但从实际来说，不建议这么做，因为真正通用的规则并不多，如果整个团队的人员和
项目组成很复杂的话，维护起来也很痛苦。

使用 IDE 自带的代码风格相关功能来检查编程规范问题。
    比如 PhpStorm 的 Code Style 设置中就可以设置编辑器和项目级别的编程风格选项，还可以针对特定的编程语言设置相应级别的编程风格选项，甚至还
    可以直接在该语言知名的编程风格之间进行切换，很灵活和方便。

再配合 IDE 自带的格式化代码功能来修复编程规范问题。
    比如 PhpStorm 中的 Reformat Code 功能。
    虽然 IDE 自带的格式化功能可以修复大多数编程规范问题，但有些问题只能手动修复，比如说漏掉可见性关键字这种问题，格式化代码功能是没办法自动推
    测该使用哪种可见性关键字的，所以没办法自动帮你修复，最终还是要手动进行修复。

除了使用 IDE 自带的代码风格功能和格式化代码功能去实现检查和修复编程规范问题，还可以通过第三方工具去实现。
    比如 PHP 的 PHP_CodeSniffer 等。PHPStorm 的代码质量检查工具支持把几个知名的第三方工具集成到 PHPStorm 中。

在 Git 钩子中添加检查步骤，如果代码违反了所选的编程规范，就不让代码提交到代码库中，并要把提交失败的原因反馈给开发人员。
    比如 PHP 的  phpcs。
